
load cxx

# Inlined codes can be placed between a pair of @[lang(mode)extra-delimiter],
# where mode can be omit.

#################################################################################
# C/C++ codes inlined with @[cpp()...] or @[cpp(block)...] will be compiled
# into a call to run the inlined codes:
#################################################################################
@[cpp()]
printf( "Hello Dao!\n" );
@[cpp()]

@[cpp(block)]
printf( "log(7) = %g\n", log(7) );
@[cpp(block)]


#################################################################################
# C/C++ codes inlined with @[cpp(function)...] will be compiled into a function
# with Dao prototype specified by @define() inside the verbatim string:
#################################################################################
@[cpp(function)]
@define( test( message : string ) )

printf( "%s\n", message );
@[cpp(function)]

test( 'Hello C/C++!' );

@[cpp(function)]
@define( test( f : float ) => float )

return log( f );
@[cpp(function)]

io.writeln( test(123) );

#################################################################################
# C/C++ codes inlined with @[cpp(header)...] will be processed as a header file.
# A file name can be specified by @file(), so that it can be included by other
# inlined codes:
#################################################################################
@[cpp(header)]
@file( klass.h )

class Klass
{
	int index;

	public:
	Klass( int i = 0 ){ index = i; }

	int Index()const{ return index; }
};
@[cpp(header)]


#################################################################################
# C/C++ codes inlined with @[cpp(source)...] will be compiled as a source file.
# A file name and the file type can be specified by @file().
# Functions that need to be wrapped can be listed by @wrap() with Dao prototypes:
#################################################################################
@[cpp(source)]
@file( klass.cpp )
@wrap( greet( message : string ) )

#include"klass.h"

void greet( const char *message )
{
	printf( "%s\n", message );
}
@[cpp(source)]

greet( 'Hello!!!' );


###################################################################################
# Currently, the following Dao types are supported:
#   "int" for "int", "float" for "float" and "double",
#   and "string" for "const char*";
#
# The following C/C++ types are supported (aliased to "int" in Dao):
#   "short/size_t/int8_t/uint8_t/int16_t/uint16_t/int32_t/uint3_t/int64_t/uint64_t"
###################################################################################
@[cpp(function)]
@define( type_size( f : short ) => int )

return sizeof(f);
@[cpp(function)]

io.writeln( type_size(123) );


###################################################################################
# array, list and tuple are also supported, but as raw C struct types for the 
# corresponding Dao types:
###################################################################################
@[cpp(function)]
@define( test_array( a : array<int> ) )

int dim = DaoArray_DimCount( a );
int i, size = DaoArray_Size( a );
dao_integer *data = DaoArray_ToInteger( a );

printf( "dimension = %i, size = %i\n", dim, size );
for(i=0; i<size; i++) data[i] *= 100;
@[cpp(function)]

a = [1,2,3;4,5,6];
test_array( a )
io.writeln( a );


@[cpp(source)]
@wrap( NewKlass( index = 0 ) => cdata )
@wrap( KlassGetIndex( obj : cdata ) => int )

#include"klass.h"

void* NewKlass( int index = 0 )
{
	return new Klass( index );
}
int KlassGetIndex( void *obj )
{
	return ((Klass*)obj)->Index();
}
@[cpp(source)]

o = NewKlass( 123 );
io.writeln( KlassGetIndex( o ) );
