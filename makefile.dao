
project = DaoMake::Project( "DaoCXX" ) 

daovm = DaoMake::FindPackage( "Dao", $REQUIRED )
llvm  = DaoMake::FindPackage( "LLVM", $OPTIONAL )

if( daovm == none || llvm == none ) return

project.UseImportLibrary( daovm, "dao" )
project.UseSharedLibrary( llvm )

project.SetTargetPath( "../../lib/dao/modules" )

project_objects = project.AddObjects( { "daoCXX.cpp" } )

if( DaoMake::IsPlatform( "MACOSX" ) ){
	sdk = DaoMake::Variables["MACOSX_SDK_PATH"]
	project_objects.AddDefinition( "MACOSX_SDK_PATH", "\\\"$(MACOSX_SDK_PATH)\\\"" );
}

project_objects.AddCompilingFlag( "-fno-rtti" );
project_objects.AddCompilingFlag( "-fvisibility-inlines-hidden" ); # llvm-3.2

project_dll = project.AddSharedLibrary( "dao_cxx", project_objects )
project_lib = project.AddStaticLibrary( "dao_cxx", project_objects )

#project.AddLinkingPath( "/Users/min/lib" )
project.AddLinkingFlag( "-lclangFrontend" )
project.AddLinkingFlag( "-lclangDriver" )
project.AddLinkingFlag( "-lclangCodeGen" )
project.AddLinkingFlag( "-lclangSema" )
project.AddLinkingFlag( "-lclangAnalysis" )
project.AddLinkingFlag( "-lclangAST" )
project.AddLinkingFlag( "-lclangParse" )
project.AddLinkingFlag( "-lclangLex" )
project.AddLinkingFlag( "-lclangBasic" )
project.AddLinkingFlag( "-lclangEdit" )
project.AddLinkingFlag( "-lclangSerialization" )


project.GenerateFinder( $TRUE );
project.Install( DaoMake::Variables[ "INSTALL_MOD" ], project_dll );
project.Install( DaoMake::Variables[ "INSTALL_MOD" ], project_lib );

daovm_doc_path = DaoMake::Variables[ "INSTALL_DOC" ];
demos = { "load_cxx.dao", "load_lib.dao", "sample.dao", "test.cxx", "test_lib.dao" }
project.Install( DaoMake::MakePath( daovm_doc_path, "./demo/modules/DaoCXX" ), demos )
